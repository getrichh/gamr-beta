"use client";

import { useSearchParams, useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import { useMemo, useEffect, useState, useRef } from "react";

// üé≠ –û–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Ç—Ä–æ
const investigations = {
        "last-rehearsal": {
            title: "–ü–æ–∫–∞–∑–∞–Ω–∏—è: –ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–µ–ø–µ—Ç–∏—Ü–∏—è",
            intro: [
                "–¢–µ–∞—Ç—Ä ¬´–°—Ñ–µ—Ä–∞¬ª. –ö–æ–≥–¥–∞-—Ç–æ ‚Äî –º–µ—Å—Ç–æ, –≥–¥–µ —Ä–æ–∂–¥–∞–ª–∏—Å—å —Ä–æ–ª–∏. –°–µ–π—á–∞—Å ‚Äî —Å—Ü–µ–Ω–∞ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è. –†–µ–∂–∏—Å—Å—ë—Ä –ò–ª—å—è –®–µ—Å—Ç–∞–∫–æ–≤ –∏—Å—á–µ–∑ –ø–æ—Å–ª–µ –±–∞–Ω–∫–µ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ–∑–æ–Ω–∞. –ù–∏ –∑–∞–ø–∏—Å–∫–∏, –Ω–∏ —Ç–µ–ª–∞. –¢–æ–ª—å–∫–æ –ø—É—Å—Ç–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Å —Ñ—Ä–∞–∑–æ–π –Ω–∞ –æ–±–ª–æ–∂–∫–µ: ¬´–ù–∞—Å—Ç–æ—è—â–µ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ –∂–∏–≤—ë—Ç –≤ –Ω–µ–≤–µ–¥–µ–Ω–∏–∏¬ª.–¢—ã –ø—Ä–∏–±—ã–ª –Ω–∞ –º–µ—Å—Ç–æ –ø–æ —Å—Ç—Ä–∞–Ω–Ω–æ–º—É –∑–æ–≤—É ‚Äî –Ω–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º—É. –¢—ã ‚Äî –¥–µ—Ç–µ–∫—Ç–∏–≤, –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–¥—ë—Ç—Å—è —Ä–∞—Å–ø—É—Ç–∞—Ç—å —á—É–∂—É—é –ø–æ—Å—Ç–∞–Ω–æ–≤–∫—É. –ï—Å–ª–∏ –≤—Å—ë —ç—Ç–æ ‚Äî –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞.–ó–∞–Ω–∞–≤–µ—Å —É–∂–µ –ø–æ–¥–Ω—è—Ç. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ¬´–ü–æ—Å–ª–µ–¥–Ω—é—é —Ä–µ–ø–µ—Ç–∏—Ü–∏—é¬ª.",
            ]
    },
};

// üîä –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–µ—á–∞—Ç–∏ —Å —Ü–∏–∫–ª–∏—á–Ω—ã–º –∑–≤—É–∫–æ–º
function TypewriterLine({
                            text,
                            delay = 0,
                            skip = false,
                        }: { text: string; delay?: number; skip?: boolean }) {
    const [displayed, setDisplayed] = useState("");
    const audioRef = useRef<HTMLAudioElement | null>(null);

    useEffect(() => {
        const chars = text.split("");
        let index = 0;
        let timeoutId: NodeJS.Timeout;

        const startTypingSound = () => {
            if (!audioRef.current) {
                const audio = new Audio("/type.wav");
                audio.loop = true;
                audio.volume = 0.4;
                audioRef.current = audio;
            }
            audioRef.current.play().catch(() => {});
        };

        const stopTypingSound = () => {
            if (audioRef.current) {
                audioRef.current.pause();
                audioRef.current.currentTime = 0;
            }
        };

        const type = () => {
            if (skip) {
                stopTypingSound();
                setDisplayed(text);
                return;
            }

            const currentChar = chars[index];

            if (index === 0 && ![" ", "\n"].includes(currentChar)) {
                startTypingSound();
            }

            setDisplayed((prev) => prev + currentChar);
            index++;

            if (index < chars.length) {
                const isPunctuation = [",", ".", "‚Äî", "‚Ä¶", "!", "?"].includes(currentChar);
                const baseDelay = Math.floor(Math.random() * 40) + 40;
                const extraPause = isPunctuation ? 200 : 0;
                timeoutId = setTimeout(type, baseDelay + extraPause);
            } else {
                stopTypingSound();
            }
        };

        const initialTimeout = setTimeout(type, delay);

        return () => {
            clearTimeout(timeoutId);
            clearTimeout(initialTimeout);
            stopTypingSound();
        };
    }, [text, delay, skip]);

    return (
        <p className="text-lg text-gray-300 font-mono whitespace-pre-wrap">
            {displayed}
            <span className="animate-pulse text-white">‚ñå</span>
        </p>
    );
}
// üìú –û—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω —Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã
export default function StartPage() {
    const searchParams = useSearchParams();
    const router = useRouter();
    const id = searchParams.get("id");

    const [skipAll, setSkipAll] = useState(false);

    const data = useMemo(() => investigations[id as keyof typeof investigations], [id]);

    useEffect(() => {
        const handleKeyDown = (e: KeyboardEvent) => {
            if (e.key === "Enter") setSkipAll(true);
        };
        window.addEventListener("keydown", handleKeyDown);
        return () => window.removeEventListener("keydown", handleKeyDown);
    }, []);

    if (!id || !data) {
        return (
            <div className="min-h-screen bg-black text-white flex items-center justify-center">
                <p>–†–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</p>
            </div>
        );
    }

    const handleStart = () => {
        router.push(`/game/${id}`);
    };

    return (
        <div className="min-h-screen bg-black text-white flex flex-col justify-center items-center px-4 text-center">
            <h1 className="text-4xl font-bold mb-6">{data.title}</h1>

            <div className="max-w-3xl mb-10 space-y-4">
                {Array.isArray(data.intro) ? (
                    data.intro.map((line, idx) => (
                        <TypewriterLine key={idx} text={line} delay={idx * 1400} skip={skipAll} />
                    ))
                ) : (
                    <TypewriterLine text={data.intro as string} skip={skipAll} />
                )}
            </div>

            <Button onClick={handleStart} className="text-lg px-8 py-6 rounded-xl">
                –ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é
            </Button>
        </div>
    );
}