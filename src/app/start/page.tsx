"use client";

import { useSearchParams, useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import { useMemo, useEffect, useState, useRef } from "react";

// üé≠ –û–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Ç—Ä–æ
const investigations = {
    "knife-in-back": {
        title: "–ù–æ–∂ –≤ —Å–ø–∏–Ω—É",
        intro:
            "–¢–µ–ª–æ –º—É–∂—á–∏–Ω—ã –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ —Å—Ç–∞—Ä–æ–≥–æ –æ—Å–æ–±–Ω—è–∫–∞. –í—Å–µ –æ–∫–Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã –∏–∑–Ω—É—Ç—Ä–∏, –∞ –¥–≤–µ—Ä—å –±—ã–ª–∞ –∑–∞–ø–µ—Ä—Ç–∞. –í –∫–æ–º–Ω–∞—Ç–µ ‚Äî —Ç—Ä–æ–µ –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º—ã—Ö.",
    },
    "last-train": {
        title: "–ü–æ—Å–ª–µ–¥–Ω–∏–π –ü–æ–µ–∑–¥",
        intro:
            "–ü–æ–µ–∑–¥ –º—á–∏—Ç—Å—è –≤ –Ω–æ—á—å. –û–¥–∏–Ω –∏–∑ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω –º—ë—Ä—Ç–≤—ã–º. –û—Å—Ç–∞–ª–æ—Å—å —Ç—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —É–±–∏–π—Ü—É.",
    },
    "masquerade": {
        title: "–ú–∞—Å–∫–∞—Ä–∞–¥ –°–º–µ—Ä—Ç–∏",
        intro:
            "–ë–∞–ª –≤ –æ—Å–æ–±–Ω—è–∫–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è —Ç—Ä–∞–≥–µ–¥–∏–µ–π. –°—Ä–µ–¥–∏ –º–∞—Å–æ–∫ —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è —É–±–∏–π—Ü–∞. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî —É–∑–Ω–∞—Ç—å, –∫—Ç–æ –æ–Ω.",
    },
    "last-rehearsal": {
        title: "–ü–æ–∫–∞–∑–∞–Ω–∏—è: –ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–µ–ø–µ—Ç–∏—Ü–∏—è",
        intro: [
            "–¢–µ–∞—Ç—Ä ¬´–°—Ñ–µ—Ä–∞¬ª –ø–æ–≥—Ä—É–∂—ë–Ω –≤ –ø–æ–ª—É–º—Ä–∞–∫. –í—á–µ—Ä–∞ –∑–¥–µ—Å—å –±—ã–ª –±–∞–Ω–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ–∑–æ–Ω–∞.–°–µ–≥–æ–¥–Ω—è ‚Äî —Ç–∏—à–∏–Ω–∞, –Ω–∞—Ä—É—à–∞–µ–º–∞—è —Ç–æ–ª—å–∫–æ —à–∞–≥–∞–º–∏ —Ç–µ—Ö–Ω–∏–∫–∏ –∏ –ø—É–ª—å—Å–∏—Ä—É—é—â–∏–º —Å–≤–µ—Ç–æ–º —Å–æ—Ñ–∏—Ç–æ–≤.–†–µ–∂–∏—Å—Å—ë—Ä –ò–ª—å—è –®–µ—Å—Ç–∞–∫–æ–≤ –∏—Å—á–µ–∑. –ù–∏ –∑–∞–ø–∏—Å–∫–∏, –Ω–∏ —Ç–µ–ª–∞. –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–≤–∫—É—Å–∏–µ —Ñ—Ä–∞–∑—ã: ¬´–ù–∞—Å—Ç–æ—è—â–µ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ –∂–∏–≤—ë—Ç –≤ –Ω–µ–≤–µ–¥–µ–Ω–∏–∏¬ª.–í—ã –æ–ø—Ä–∞—à–∏–≤–∞–µ—Ç–µ —Ç—Ä–æ–∏—Ö ‚Äî –∞–∫—Ç—Ä–∏—Å—É, —Ç–µ—Ö–Ω–∏–∫–∞ –∏ —É—á–µ–Ω–∏—Ü—É. –£ –∫–∞–∂–¥–æ–≥–æ ‚Äî —Å–≤–æ—è –ø—Ä–∞–≤–¥–∞. –ò –≤—Å–µ –æ–Ω–∏ —É–≤–µ—Ä–µ–Ω—ã: –≥–æ–≤–æ—Ä—è—Ç –∏—Å–∫—Ä–µ–Ω–Ω–µ.–ù–æ –µ—Å–ª–∏ –ø—Ä–∏—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è, —Å—Ü–µ–Ω–∞ –≥–æ–≤–æ—Ä–∏—Ç –±–æ–ª—å—à–µ, —á–µ–º —Å–ª–æ–≤–∞.–¢—ã –Ω–µ –¥–µ—Ç–µ–∫—Ç–∏–≤. –¢—ã –∑—Ä–∏—Ç–µ–ª—å, –æ–∫–∞–∑–∞–≤—à–∏–π—Å—è –Ω–∞ —Å–ø–µ–∫—Ç–∞–∫–ª–µ, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Ä–µ–ø–µ—Ç–∏—Ä–æ–≤–∞–ª–∏.–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ¬´–ü–æ—Å–ª–µ–¥–Ω—é—é —Ä–µ–ø–µ—Ç–∏—Ü–∏—é¬ª. –¢–≤–æ—è —Ä–æ–ª—å: –Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–¥—É –∏–ª–∏ —Å—ã–≥—Ä–∞—Ç—å –ø–æ —á—É–∂–æ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é."
        ],
    },
};

// üîä –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–µ—á–∞—Ç–∏ —Å —Ü–∏–∫–ª–∏—á–Ω—ã–º –∑–≤—É–∫–æ–º
function TypewriterLine({ text, delay = 0 }: { text: string; delay?: number }) {
    const [displayed, setDisplayed] = useState("");
    const audioRef = useRef<HTMLAudioElement | null>(null);

    useEffect(() => {
        const chars = text.split("");
        let index = 0;
        let timeoutId: NodeJS.Timeout;

        const startTypingSound = () => {
            if (!audioRef.current) {
                const audio = new Audio("/type.wav");
                audio.loop = true;
                audio.volume = 0.4;
                audioRef.current = audio;
            }
            audioRef.current.play().catch(() => {});
        };

        const stopTypingSound = () => {
            if (audioRef.current) {
                audioRef.current.pause();
                audioRef.current.currentTime = 0;
            }
        };

        const type = () => {
            const currentChar = chars[index];

            if (index === 0 && ![" ", "\n"].includes(currentChar)) {
                startTypingSound();
            }

            setDisplayed((prev) => prev + currentChar);
            index++;

            if (index < chars.length) {
                const isPunctuation = [",", ".", "‚Äî", "‚Ä¶", "!", "?"].includes(currentChar);
                const baseDelay = Math.floor(Math.random() * 40) + 40;
                const extraPause = isPunctuation ? 200 : 0;
                timeoutId = setTimeout(type, baseDelay + extraPause);
            } else {
                stopTypingSound();
            }
        };

        const initialTimeout = setTimeout(type, delay);

        return () => {
            clearTimeout(timeoutId);
            clearTimeout(initialTimeout);
            stopTypingSound();
        };
    }, [text, delay]);

    return (
        <p className="text-lg text-gray-300 font-mono whitespace-pre-wrap">
            {displayed}
            <span className="animate-pulse text-white">‚ñå</span>
        </p>
    );
}

// üìú –û—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω —Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã
export default function StartPage() {
    const searchParams = useSearchParams();
    const router = useRouter();
    const id = searchParams.get("id");

    const data = useMemo(() => investigations[id as keyof typeof investigations], [id]);

    if (!id || !data) {
        return (
            <div className="min-h-screen bg-black text-white flex items-center justify-center">
                <p>–†–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</p>
            </div>
        );
    }

    const handleStart = () => {
        router.push(`/game/${id}`);
    };

    return (
        <div className="min-h-screen bg-black text-white flex flex-col justify-center items-center px-4 text-center">
            <h1 className="text-4xl font-bold mb-6">{data.title}</h1>

            <div className="max-w-3xl mb-10 space-y-4">
                {Array.isArray(data.intro) ? (
                    data.intro.map((line, idx) => (
                        <TypewriterLine key={idx} text={line} delay={idx * 1400} />
                    ))
                ) : (
                    <TypewriterLine text={data.intro as string} />
                )}
            </div>

            <Button onClick={handleStart} className="text-lg px-8 py-6 rounded-xl">
                –ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é
            </Button>
        </div>
    );
}